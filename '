#!/usr/bin/env python

import asyncio

async def factorial(name: str, number: int) -> int:

    f = 1

    for i in range(2, number + 1):
        print(f"Task {name}: Compute factorial({number}), currently i={i}...")

        await asyncio.sleep(1)

        try:
            f *= i
        except TypeError:
            return(name, number, "failed")
        else:
            print(f"Task {name}: factorial({number}) = {f}")
            return(name, number,"passed")


async def main():

    # paramters 
    params = [("A", 2), ("E", "rashid"), ({}, {}), ("B", 3), ("C", 4)]


    # awaitables again 
    list_of_awaitables = [factorial(tup[0], tup[1]) for tup in params]


    # Schedule three calls *concurrently*:
    try:
        results = await asyncio.gather(*list_of_awaitables, return_exceptions=True)
        print(results)

    except BaseException:
        print('something was excepted')







asyncio.run(main())
